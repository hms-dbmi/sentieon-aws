AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation CGAP network template, for use in an ECS-based CGAP
  environment.
Outputs:
  ApplicationSecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationSecurityGroup'
    Value: !Ref 'ApplicationSecurityGroup'
  HTTPSSecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}-HTTPSSecurityGroup'
    Value: !Ref 'HTTPSSecurityGroup'
  PrivateSubnetA:
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetA'
    Value: !Ref 'PrivateSubnetA'
  PrivateSubnetB:
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetB'
    Value: !Ref 'PrivateSubnetB'
  PublicSubnetA:
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetA'
    Value: !Ref 'PublicSubnetA'
  PublicSubnetB:
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetB'
    Value: !Ref 'PublicSubnetB'
  VPC:
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
    Value: !Ref 'VPC'
Resources:
  ApplicationHTTPSInboundAccess:
    Properties:
      CidrIp: '0.0.0.0/0'
      Description: allows inbound traffic on tcp port 443
      FromPort: 443
      GroupId: !Ref 'ApplicationSecurityGroup'
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  ApplicationHTTPSOutboundAllAccess:
    Properties:
      CidrIp: '0.0.0.0/0'
      Description: allows outbound traffic on tcp port 443
      FromPort: 443
      GroupId: !Ref 'ApplicationSecurityGroup'
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupEgress
  ApplicationNTPInboundAllAccess:
    Properties:
      CidrIp: '0.0.0.0/0'
      Description: allows inbound traffic on udp port 123
      FromPort: 123
      GroupId: !Ref 'ApplicationSecurityGroup'
      IpProtocol: udp
      ToPort: 123
    Type: AWS::EC2::SecurityGroupIngress
  ApplicationNTPOutboundAllAccess:
    Properties:
      CidrIp: '0.0.0.0/0'
      Description: allows outbound traffic on udp port 123
      FromPort: 123
      GroupId: !Ref 'ApplicationSecurityGroup'
      IpProtocol: udp
      ToPort: 123
    Type: AWS::EC2::SecurityGroupEgress
  ApplicationIcmpInboundAccess:
    Properties:
      CidrIp: 10.1.0.0/16
      Description: allows inbound traffic on ICMP
      FromPort: -1
      GroupId: !Ref 'ApplicationSecurityGroup'
      IpProtocol: icmp
      ToPort: -1
    Type: AWS::EC2::SecurityGroupIngress
  ApplicationIcmpOutboundAccess:
    Properties:
      CidrIp: 10.1.0.0/16
      Description: allows inbound traffic on ICMP
      FromPort: -1
      GroupId: !Ref 'ApplicationSecurityGroup'
      IpProtocol: icmp
      ToPort: -1
    Type: AWS::EC2::SecurityGroupEgress
  ApplicationSentieonInboundAccess:
    Properties:
      CidrIp: 10.1.0.0/16
      Description: allows inbound traffic on ICMP
      FromPort: 8990
      GroupId: !Ref 'ApplicationSecurityGroup'
      IpProtocol: tcp
      ToPort: 8990
    Type: AWS::EC2::SecurityGroupIngress
  ApplicationSentieonOutboundAccess:
    Properties:
      CidrIp: 10.1.0.0/16
      Description: allows outbound traffic on ICMP
      FromPort: 8990
      GroupId: !Ref 'ApplicationSecurityGroup'
      IpProtocol: tcp
      ToPort: 8990
    Type: AWS::EC2::SecurityGroupEgress
  ApplicationSecurityGroup:
    Properties:
      GroupDescription: allows access needed by Application
      GroupName: ApplicationSecurityGroup
      Tags:
        - Key: Name
          Value: ApplicationSecurityGroup
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  ApplicationWebInboundAccess:
    Properties:
      CidrIp: '0.0.0.0/0'
      Description: allows inbound traffic on tcp port 80
      FromPort: 80
      GroupId: !Ref 'ApplicationSecurityGroup'
      IpProtocol: tcp
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  ApplicationWebOutboundAllAccess:
    Properties:
      CidrIp: '0.0.0.0/0'
      Description: allows outbound traffic on tcp port 80
      FromPort: 80
      GroupId: !Ref 'ApplicationSecurityGroup'
      IpProtocol: tcp
      ToPort: 80
    Type: AWS::EC2::SecurityGroupEgress
  AttachGateway:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCGatewayAttachment
  NATGatewayPublicSubnetARoute:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGatewayPublicSubnetA'
      RouteTableId: !Ref 'PrivateRouteTable'
    Type: AWS::EC2::Route
  PrivateSubnetARouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'PrivateSubnetA'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnetBRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'PrivateSubnetB'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnetCRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'PrivateSubnetC'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnetDRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'PrivateSubnetD'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnetERouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'PrivateSubnetE'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnetFRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'PrivateSubnetF'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnetAPublicRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnetA'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnetBPublicRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnetB'
    Type: AWS::EC2::SubnetRouteTableAssociation
  SentieonLicenseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EC2 Security Group for instances launched in the VPC
      GroupName: !Ref AWS::StackName
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8990
          ToPort: 8990
          CidrIp: 10.1.0.0/16
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmpv6
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 52.89.132.242/32
      Tags:
        - Key: Name
          Value: SentieonLicenseSecurityGroup
      VpcId: !Ref VPC
  EipPublicSubnetA:
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  EipPublicSubnetB:
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  HTTPSInboundAccess:
    Properties:
      CidrIp: '0.0.0.0/0'
      Description: allows inbound traffic on tcp port 443
      FromPort: 443
      GroupId: !Ref 'HTTPSSecurityGroup'
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  HTTPSOutboundAllAccess:
    Properties:
      CidrIp: '0.0.0.0/0'
      Description: allows outbound traffic on tcp port 443
      FromPort: 443
      GroupId: !Ref 'HTTPSSecurityGroup'
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupEgress
  HTTPSSecurityGroup:
    Properties:
      GroupDescription: allows https-only web access on port 443
      GroupName: HTTPSSecurityGroup
      Tags:
        - Key: Name
          Value: HTTPSSecurityGroup
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  InternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
    Type: AWS::EC2::InternetGateway
  InternetGatewayRoute:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'
    Type: AWS::EC2::Route
  NATGatewayPublicSubnetA:
    DependsOn: EipPublicSubnetA
    Properties:
      AllocationId: !GetAtt 'EipPublicSubnetA.AllocationId'
      SubnetId: !Ref 'PublicSubnetA'
      Tags:
        - Key: Name
          Value: NATGatewayPublicSubnetA
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
    Type: AWS::EC2::NatGateway
  NATGatewayPublicSubnetB:
    DependsOn: EipPublicSubnetB
    Properties:
      AllocationId: !GetAtt 'EipPublicSubnetB.AllocationId'
      SubnetId: !Ref 'PublicSubnetB'
      Tags:
        - Key: Name
          Value: NATGatewayPublicSubnetB
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
    Type: AWS::EC2::NatGateway
  PrivateRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: PrivateRouteTable
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PrivateSubnetA:
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.1.0.0/20
      Tags:
        - Key: Name
          Value: PrivateSubnetA
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateSubnetB:
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.1.16.0/20
      Tags:
        - Key: Name
          Value: PrivateSubnetB
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateSubnetC:
    Properties:
      AvailabilityZone: us-east-1c
      CidrBlock: 10.1.32.0/20
      Tags:
        - Key: Name
          Value: PrivateSubnetC
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateSubnetD:
    Properties:
      AvailabilityZone: us-east-1d
      CidrBlock: 10.1.48.0/20
      Tags:
        - Key: Name
          Value: PrivateSubnetD
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateSubnetE:
    Properties:
      AvailabilityZone: us-east-1e
      CidrBlock: 10.1.128.0/20
      Tags:
        - Key: Name
          Value: PrivateSubnetE
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateSubnetF:
    Properties:
      AvailabilityZone: us-east-1f
      CidrBlock: 10.1.144.0/20
      Tags:
        - Key: Name
          Value: PrivateSubnetF
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: PublicRouteTable
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PublicSubnetA:
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.1.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnetA
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnetB:
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.1.192.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnetB
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  MainRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: MainRouteTable
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  VPC:
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'
        - Key: env
          Value: prod
        - Key: project
          Value: cgap
        - Key: owner
          Value: project
    Type: AWS::EC2::VPC
  dynamodbVPCGEndpoint:
    Properties:
      RouteTableIds:
        - !Ref 'PrivateRouteTable'
      ServiceName: com.amazonaws.us-east-1.dynamodb
      VpcEndpointType: Gateway
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCEndpoint
  ebsVPCIEndpoint:
    Properties:
      PrivateDnsEnabled: 'true'
      SecurityGroupIds:
        - !Ref 'ApplicationSecurityGroup'
      ServiceName: com.amazonaws.us-east-1.ebs
      SubnetIds:
        - !Ref 'PrivateSubnetA'
        - !Ref 'PrivateSubnetB'
        - !Ref 'PrivateSubnetC'
        - !Ref 'PrivateSubnetD'
        - !Ref 'PrivateSubnetE'
        - !Ref 'PrivateSubnetF'
      VpcEndpointType: Interface
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCEndpoint
  ec2VPCIEndpoint:
    Properties:
      PrivateDnsEnabled: 'true'
      SecurityGroupIds:
        - !Ref 'ApplicationSecurityGroup'
      ServiceName: com.amazonaws.us-east-1.ec2
      SubnetIds:
        - !Ref 'PrivateSubnetA'
        - !Ref 'PrivateSubnetB'
        - !Ref 'PrivateSubnetC'
        - !Ref 'PrivateSubnetD'
        - !Ref 'PrivateSubnetE'
        - !Ref 'PrivateSubnetF'
      VpcEndpointType: Interface
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCEndpoint
  ecrapiVPCIEndpoint:
    Properties:
      PrivateDnsEnabled: 'true'
      SecurityGroupIds:
        - !Ref 'ApplicationSecurityGroup'
      ServiceName: com.amazonaws.us-east-1.ecr.api
      SubnetIds:
        - !Ref 'PrivateSubnetA'
        - !Ref 'PrivateSubnetB'
        - !Ref 'PrivateSubnetC'
        - !Ref 'PrivateSubnetD'
        - !Ref 'PrivateSubnetE'
        - !Ref 'PrivateSubnetF'
      VpcEndpointType: Interface
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCEndpoint
  ecrdkrVPCIEndpoint:
    Properties:
      PrivateDnsEnabled: 'true'
      SecurityGroupIds:
        - !Ref 'ApplicationSecurityGroup'
      ServiceName: com.amazonaws.us-east-1.ecr.dkr
      SubnetIds:
        - !Ref 'PrivateSubnetA'
        - !Ref 'PrivateSubnetB'
        - !Ref 'PrivateSubnetC'
        - !Ref 'PrivateSubnetD'
        - !Ref 'PrivateSubnetE'
        - !Ref 'PrivateSubnetF'
      VpcEndpointType: Interface
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCEndpoint
  lambdaVPCIEndpoint:
    Properties:
      PrivateDnsEnabled: 'true'
      SecurityGroupIds:
        - !Ref 'ApplicationSecurityGroup'
      ServiceName: com.amazonaws.us-east-1.lambda
      SubnetIds:
        - !Ref 'PrivateSubnetA'
        - !Ref 'PrivateSubnetB'
        - !Ref 'PrivateSubnetC'
        - !Ref 'PrivateSubnetD'
        - !Ref 'PrivateSubnetE'
        - !Ref 'PrivateSubnetF'
      VpcEndpointType: Interface
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCEndpoint
  logsVPCIEndpoint:
    Properties:
      PrivateDnsEnabled: 'true'
      SecurityGroupIds:
        - !Ref 'ApplicationSecurityGroup'
      ServiceName: com.amazonaws.us-east-1.logs
      SubnetIds:
        - !Ref 'PrivateSubnetA'
        - !Ref 'PrivateSubnetB'
        - !Ref 'PrivateSubnetC'
        - !Ref 'PrivateSubnetD'
        - !Ref 'PrivateSubnetE'
        - !Ref 'PrivateSubnetF'
      VpcEndpointType: Interface
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCEndpoint
  s3VPCGEndpoint:
    Properties:
      RouteTableIds:
        - !Ref 'PrivateRouteTable'
      ServiceName: com.amazonaws.us-east-1.s3
      VpcEndpointType: Gateway
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCEndpoint
  secretsmanagerVPCIEndpoint:
    Properties:
      PrivateDnsEnabled: 'true'
      SecurityGroupIds:
        - !Ref 'ApplicationSecurityGroup'
      ServiceName: com.amazonaws.us-east-1.secretsmanager
      SubnetIds:
        - !Ref 'PrivateSubnetA'
        - !Ref 'PrivateSubnetB'
        - !Ref 'PrivateSubnetC'
        - !Ref 'PrivateSubnetD'
        - !Ref 'PrivateSubnetE'
        - !Ref 'PrivateSubnetF'
      VpcEndpointType: Interface
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCEndpoint
  sqsVPCIEndpoint:
    Properties:
      PrivateDnsEnabled: 'true'
      SecurityGroupIds:
        - !Ref 'ApplicationSecurityGroup'
      ServiceName: com.amazonaws.us-east-1.sqs
      SubnetIds:
        - !Ref 'PrivateSubnetA'
        - !Ref 'PrivateSubnetB'
        - !Ref 'PrivateSubnetC'
        - !Ref 'PrivateSubnetD'
        - !Ref 'PrivateSubnetE'
        - !Ref 'PrivateSubnetF'
      VpcEndpointType: Interface
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCEndpoint
  ssmVPCIEndpoint:
    Properties:
      PrivateDnsEnabled: 'true'
      SecurityGroupIds:
        - !Ref 'ApplicationSecurityGroup'
      ServiceName: com.amazonaws.us-east-1.ssm
      SubnetIds:
        - !Ref 'PrivateSubnetA'
        - !Ref 'PrivateSubnetB'
        - !Ref 'PrivateSubnetC'
        - !Ref 'PrivateSubnetD'
        - !Ref 'PrivateSubnetE'
        - !Ref 'PrivateSubnetF'
      VpcEndpointType: Interface
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCEndpoint
  statesVPCIEndpoint:
    Properties:
      PrivateDnsEnabled: 'true'
      SecurityGroupIds:
        - !Ref 'ApplicationSecurityGroup'
      ServiceName: com.amazonaws.us-east-1.states
      SubnetIds:
        - !Ref 'PrivateSubnetA'
        - !Ref 'PrivateSubnetB'
        - !Ref 'PrivateSubnetC'
        - !Ref 'PrivateSubnetD'
        - !Ref 'PrivateSubnetE'
        - !Ref 'PrivateSubnetF'
      VpcEndpointType: Interface
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCEndpoint
